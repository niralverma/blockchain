Part 1 

So, what is Substrate?
It's the main blockchain SDK (software development kit) used by programmers to build the parachains that make up the Polkadot network.Polkadot is a Layer-0 protocol, built by Ethereum‚Äôs co-founder Gavin Wood citing Ethereum‚Äôs inability to scale. Wood wanted to solve this problem by introducing a proof-of-stake (POS) validation system since PoS consensus is used by most modern blockchains.Polkadot makes the development of a Layer-1 blockchain easier by providing a built-in infrastructure for developers to build upon.

Why do we need Substrate?
Blockchain development is a very complex and resource consuming task. It involves many sophisticated technologies including advanced cryptography and distributed computing. The development also involves a lot of problem statements like scalability, interoperability, upgradability, etc.So, substrate is an SDK that provide that framework to build a blockchain, so rather than focusing on developing a framework from scratch like the application layer, network layer, RPC, etc, you could focus on developing the business logic or its runtime logic.

What is the difference between a stable version and a nightly version? (RUST)
Stable is intended for regular users. It is not the "newest" version, but it is thoroughly tested. Nightly is basically the opposite, you're getting the latest versions being built, but they are untested and prone to bugs and crashes. I would only use a Nightly build if it fixes a specific problem for whatever specific game you're running.

Substrate and its basics
üíª Environment Setup

For Windows
You need to install Linux Subsystem for Windows as this development needs Linux kernel. 

For this course, I will go with WSL.
Start by running your Windows terminal in administrator mode
 
In your CMD or Powershell run the following command

[wsl --install]
[sudo apt update]
[sudo apt install --assume-yes git clang curl libssl-dev llvm libudev-dev make protobuf-compiler]
[curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh]
Now update your current shell with cargo environment by running the following command üëáüèº
[source ~/.cargo/env]
[rustc --version]
[rustup default stable]
[rustup update]
[rustup update nightly]
[rustup target add wasm32-unknown-unknown --toolchain nightly]
[rustup show]
[rustup +nightly show]


Coding our first blockchain ‚õì
üßë‚Äçüíª Compiling the Substrate framework using Cargo

[cd substrate-node-template]

Default structure of the Substrate framework
Node folder üìÅ
It is the most important folder as it contains all the Layers of the blockchain, the runtime, executor and the CLI.Inside the Node folder you will find three folders, CLI, runtime, executor. Today we will only compile the basic framework for you to understand the environment and how it works.The CLI folder contains the terminal framework and the chain spec files which contains the configurations of your blockchain. This folder contains files which help users of your blockchain to interact with the it using CLI and JSON RPC.The next important folder is the Runtime folder which contains files which handle the working logic of the blockchain as well its consensus that it uses when implementing the principle of distributed computing.

The Consensus ü§ù
It is an algorithm that sets a certain set of rules and regulations for the participants of the network on how they should and could interact with the blockchain, i.e, PoW, PoS, PoH.The consensus is a practical version of the Byzantine fault tolerance theorem which is a mathematical theorem that helps the components of a system reach a mutual agreement with each other to defend against any failure in the system

The Blockchain Trilemma ‚õì
There is a rule of thumb blockchain system design termed by Vitalik Buterin called the blockchain trilemma. It refers to a widely held belief that decentralized networks can only provide two or three benefits at any given time with respect to decentralization, security, and scalability. So when you achieve one of the benefits, you have to let go off the other two!I know that's a lot of theory but I imagined it would be fun to learn about important concepts while we are building the blockchain.

[cargo bluid --release]

Distributed computing üñ•
It is a concept of running the nodes of a network on different computers or systems with computational power, thus distributing the computer power needed among the participants of the network. There are different types of distributed computing and blockchain uses a peer-to-peer model or p2p.These participants of the network interact with each other based on a set of rules called consensus which makes sure that,
-Each participant of the network gets fair chances 
-Each participant of the network is true to the network
-Incentivize each participant of the network if they are true to the network
-Penalize each participant of the network if they conduct an activity which goes against the consensus of the network

Some more blockchain üü• üü¶ üü¶ üü¶
The blockchain stores the data as blocks and each block consist of previous hash, block height, parent hash, etc
The first block produced by any blockchain is called the genesis block, which will have a hash and the block. The block succeeding the genesis block will have the hash of the genesis block and its previous hash. This way the chain will continue - thus the term blockchain.
These blocks are produced by a block authoring algorithm or node which processes transactions and submits them into the validating queue to be included in the blockchain.The block authoring node will process the transaction locally in a transaction pool which is like a cache memory.
The valid transactions from the pool enters a transaction queue which will have two queues: the ready queue and the future queue.The ready queue contains the transactions which will enter the pending block, that is, the block which will be produced once the node gets the chance to be the block authoring node.
The future queue contains the transaction which will be valid for the future blocks like suppose if the nonce of the current transaction is too high when compared to the existing transactions in the pending block. These transactions will wait in the future queue for its turn to be included in the pending block.
The blocks produced are then gossiped (a way to signal the consensus that the node is ready to submit its block into the chain) and the consensus will listen to these blocks from all the nodes and verify the block by listening to what the majority of the nodes are saying.Each block has a hash right, so these hashes are produced by SHA256 algorithm. Hence whenever a node gossips about its block, the consensus verifies the hash with the other nodes if 2/3 nodes have the same hash.
So, these blocks come together to produce a chain in the order of their inclusion in the chain and linked with a hash so if anyone tries to change a transaction in the queue, the hash of the whole block will change due to a concept called avalanche effect in cryptography. Doing so will lead to the breaking the chain so nodes will not be a part of the consensus algorithm and would not be allowed to participate in the network until it restore its database back to the original state.

So if I summarize the whole process,
-A transaction happens
-The transaction enters the transaction pool and some checks are performed locally like if they have enough balance to pay, the gas, the size, etc.
-If the transaction is invalid, it is dropped from the pool
-If the transaction is valid, the transaction moves into the transaction queue in the order of their validity
-The node waits for its chance to be the next block authoring node 
-Once the node is a block authoring node, it calls a separate execution function to produce blocks with the ready queue and gossips the production of the block for the other nodes to listen
-2/3 check is done - if true the block is included in to the blockchain
This summarizes the whole transaction cycle of a blockchain. It is one of the most important concepts when it comes to designing the runtime logic. 

What is the relay chain in Polkadot? üîó
Polkadot is a relay chain, that is, a central chain which creates a multichain architecture for other chains to communicate.Parachains, on the other hand, are specialized chains that connect to the relay chain in a shared security architecture - or in layman terms, a shared consensus.In short. a relay chain is the cpu and parachains are the cores. Each core has their own computational power and they come together to form a multicore system. That summarizes the whole Polkadot Layer-0 architecture.
